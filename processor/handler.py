import requests
import os
import json
import time

XO_NAMESPACE = hashlib.sha512('ioc'.encode("utf-8")).hexdigest()[0:6]
CAPE_UPLOAD_URL = "http://localhost:8000/apiv2/tasks/create/file/"
CAPE_STATUS_URL = "http://localhost:8000/apiv2/tasks/status/{0}/"
CAPE_REPORT_URL = "http://localhost:8000/apiv2/tasks/get/report/json/"

class IocTransactionHandler(TransactionHandler):

	@property
	def family_name(self):
		return 'ioc'

	@property
	def family_versions(self):
		return ['1.0']

	@property
	def namespaces(self):
		return [XO_NAMESPACE]

	def compare_reports(user_report,cape_report):

		n_files_u = user_report[""]
		pass

	def apply(self, transaction, context):

		payload = transaction.payload()
		
		#Get the file hash to retrieve the complete program from the tmp folder
		user_report = json.loads(payload)
		file_name = report["SHA256"]
		if not os.path.exists("/tmp/" + file_name):
			raise InvalidTransaction("File not uploaded to the server")

		#Generate a CAPE task with the executable
		files = {'upload_file': open('/tmp/' + file_name,'rb')}
		r = requests.post(CAPE_UPLOAD_URL, files=files)

		if r.status_code != 200:
			raise InvalidTransaction("Unable to generate CAPE task")

		task_id = json.loads(r.text)["data"]["task_ids"]

		#POLL the CAPE API to track execution of the task
		while(true):
			r = requests.get(CAPE_STATUS_URL.format(task_id))
			if r.status_code !=200:
				raise InvalidTransaction("Error while polling CAPE task")
			status = json.loads(r.text)["data"]
			if status == "analyzed" or status == "reported":
				break
			else if status == "processing":
				time.sleep(15)
			else:
				raise InvalidTransaction("CAPE processing error")

		#Check the report generated by CAPE
		r = requests.get(CAPE_REPORT_URL)
		if r.status_code != 200:
			raise InvalidTransaction("Error retrieving the report")
		cape_report = json.loads(r.text)
		compare_reports(user_report,cape_report)
